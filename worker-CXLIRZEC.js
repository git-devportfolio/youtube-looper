var r=null;function v(){let e=new URL(self.location.href).pathname,b=e.lastIndexOf("/");return b!==-1&&(e=e.substring(0,b)),e.endsWith("/browser")&&(e=e.substring(0,e.length-8)),e.endsWith("/")&&(e=e.substring(0,e.length-1)),e||""}(async()=>{try{console.time("[RubberbandWorker] WASM compile");let a=v(),e=`${a}/assets/rubberband/rubberband.umd.min.js`,b=`${a}/assets/rubberband/rubberband.wasm`;console.log("[RubberbandWorker] Base path:",a),console.log("[RubberbandWorker] Loading script from:",e),console.log("[RubberbandWorker] Loading WASM from:",b);let l=await fetch(e);if(!l.ok)throw new Error(`Failed to fetch rubberband script: ${l.status} ${l.statusText}`);let c=await l.text();if((0,eval)(c),!self.rubberband)throw new Error("Rubberband library not loaded correctly");let u=await fetch(b);if(!u.ok)throw new Error(`Failed to fetch rubberband WASM: ${u.status} ${u.statusText}`);let h=await WebAssembly.compileStreaming(u);r=await self.rubberband.RubberBandInterface.initialize(h),console.timeEnd("[RubberbandWorker] WASM compile"),postMessage({ready:!0})}catch(a){console.error("[RubberbandWorker] Initialization error:",a);let e={error:`Failed to initialize rubberband-wasm: ${a instanceof Error?a.message:String(a)}`};postMessage(e)}})();onmessage=async function(a){if(console.log("[RubberbandWorker] Message received from main script",a.data),!r){postMessage({error:"Rubberband API not initialized yet"});return}try{let{channelBuffers:e,sampleRate:b,pitch:l,tempo:c}=a.data;if(!e||e.length===0)throw new Error("No channel buffers provided");if(b<=0)throw new Error("Invalid sample rate");if(c<=0)throw new Error("Invalid tempo value");let u=1/c,h=Math.ceil(e[0].length*u),f=e.map(()=>new Float32Array(h));console.log(`[RubberbandWorker] playbackRate=${c}, timeRatio=${u.toFixed(3)}, inputSamples=${e[0].length}, outputSamples=${h}`);let o=r.rubberband_new(b,e.length,0,1,1),_=Math.pow(2,l/12);r.rubberband_set_pitch_scale(o,_),r.rubberband_set_time_ratio(o,u);let i=r.rubberband_get_samples_required(o),m=r.malloc(e.length*4),p=[];for(let n=0;n<e.length;n++){let s=r.malloc(i*4);p.push(s),r.memWritePtr(m+n*4,s)}r.rubberband_set_expected_input_duration(o,e[0].length);let R=Date.now(),M=n=>{if(Date.now()-R>250){let s={progress:Math.round(n()*100)};postMessage(s),R=Date.now()}};postMessage({status:"Studying...",progress:0}),console.time("[RubberbandWorker] study");let t=0;for(;t<e[0].length;){M(()=>t/e[0].length*.5),e.forEach((d,g)=>r.memWrite(p[g],d.subarray(t,t+i)));let n=Math.min(i,e[0].length-t);t+=n;let s=t>=e[0].length;r.rubberband_study(o,m,n,s?1:0)}console.timeEnd("[RubberbandWorker] study"),postMessage({status:"Processing...",progress:50}),console.time("[RubberbandWorker] process"),t=0;let W=0,w=(n=!1)=>{for(;;){let s=r.rubberband_available(o);if(s<1||!n&&s<i)break;let d=r.rubberband_retrieve(o,m,Math.min(i,s));p.forEach((g,k)=>{let y=r.memReadF32(g,d);f[k].set(y,W)}),W+=d}};for(;t<e[0].length;){M(()=>.5+t/e[0].length*.5),e.forEach((d,g)=>r.memWrite(p[g],d.subarray(t,t+i)));let n=Math.min(i,e[0].length-t);t+=n;let s=t>=e[0].length;r.rubberband_process(o,m,n,s?1:0),w(!1)}w(!0),console.timeEnd("[RubberbandWorker] process"),postMessage({progress:100}),p.forEach(n=>r.free(n)),r.free(m),r.rubberband_delete(o),postMessage({channelBuffers:f})}catch(e){console.error("[RubberbandWorker] Processing error:",e);let b={error:`Audio processing failed: ${e instanceof Error?e.message:String(e)}`};postMessage(b)}};
