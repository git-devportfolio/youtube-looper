var r=null;function y(){let e=new URL(self.location.href).pathname,b=e.lastIndexOf("/");return b!==-1&&(e=e.substring(0,b)),e.endsWith("/browser")&&(e=e.substring(0,e.length-8)),e.endsWith("/")&&(e=e.substring(0,e.length-1)),e||""}(async()=>{try{console.time("[RubberbandWorker] WASM compile");let s=y(),e=`${s}/assets/rubberband/rubberband.umd.min.js`,b=`${s}/assets/rubberband/rubberband.wasm`;console.log("[RubberbandWorker] Base path:",s),console.log("[RubberbandWorker] Loading script from:",e),console.log("[RubberbandWorker] Loading WASM from:",b);let i=await fetch(e);if(!i.ok)throw new Error(`Failed to fetch rubberband script: ${i.status} ${i.statusText}`);let c=await i.text();if((0,eval)(c),!self.rubberband)throw new Error("Rubberband library not loaded correctly");let l=await fetch(b);if(!l.ok)throw new Error(`Failed to fetch rubberband WASM: ${l.status} ${l.statusText}`);let h=await WebAssembly.compileStreaming(l);r=await self.rubberband.RubberBandInterface.initialize(h),console.timeEnd("[RubberbandWorker] WASM compile"),postMessage({ready:!0})}catch(s){console.error("[RubberbandWorker] Initialization error:",s);let e={error:`Failed to initialize rubberband-wasm: ${s instanceof Error?s.message:String(s)}`};postMessage(e)}})();onmessage=async function(s){if(console.log("[RubberbandWorker] Message received from main script",s.data),!r){postMessage({error:"Rubberband API not initialized yet"});return}try{let{channelBuffers:e,sampleRate:b,pitch:i,tempo:c}=s.data;if(!e||e.length===0)throw new Error("No channel buffers provided");if(b<=0)throw new Error("Invalid sample rate");if(c<=0)throw new Error("Invalid tempo value");let l=Math.ceil(e[0].length*c),h=e.map(()=>new Float32Array(l)),o=r.rubberband_new(b,e.length,0,1,1),W=Math.pow(2,i/12);r.rubberband_set_pitch_scale(o,W),r.rubberband_set_time_ratio(o,c);let u=r.rubberband_get_samples_required(o),m=r.malloc(e.length*4),p=[];for(let n=0;n<e.length;n++){let a=r.malloc(u*4);p.push(a),r.memWritePtr(m+n*4,a)}r.rubberband_set_expected_input_duration(o,e[0].length);let f=Date.now(),R=n=>{if(Date.now()-f>250){let a={progress:Math.round(n()*100)};postMessage(a),f=Date.now()}};postMessage({status:"Studying...",progress:0}),console.time("[RubberbandWorker] study");let t=0;for(;t<e[0].length;){R(()=>t/e[0].length*.5),e.forEach((d,g)=>r.memWrite(p[g],d.subarray(t,t+u)));let n=Math.min(u,e[0].length-t);t+=n;let a=t>=e[0].length;r.rubberband_study(o,m,n,a?1:0)}console.timeEnd("[RubberbandWorker] study"),postMessage({status:"Processing...",progress:50}),console.time("[RubberbandWorker] process"),t=0;let M=0,w=(n=!1)=>{for(;;){let a=r.rubberband_available(o);if(a<1||!n&&a<u)break;let d=r.rubberband_retrieve(o,m,Math.min(u,a));p.forEach((g,_)=>{let k=r.memReadF32(g,d);h[_].set(k,M)}),M+=d}};for(;t<e[0].length;){R(()=>.5+t/e[0].length*.5),e.forEach((d,g)=>r.memWrite(p[g],d.subarray(t,t+u)));let n=Math.min(u,e[0].length-t);t+=n;let a=t>=e[0].length;r.rubberband_process(o,m,n,a?1:0),w(!1)}w(!0),console.timeEnd("[RubberbandWorker] process"),postMessage({progress:100}),p.forEach(n=>r.free(n)),r.free(m),r.rubberband_delete(o),postMessage({channelBuffers:h})}catch(e){console.error("[RubberbandWorker] Processing error:",e);let b={error:`Audio processing failed: ${e instanceof Error?e.message:String(e)}`};postMessage(b)}};
